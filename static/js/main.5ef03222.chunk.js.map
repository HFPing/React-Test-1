{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","_ref","classes","react_default","a","createElement","AppBar_default","position","Toolbar_default","IconButton_default","className","menuButton","color","aria-label","Menu_default","Typography_default","variant","grow","Button_default","BottomBar","_ref2","appBarBottom","toolbar","Search_default","MoreVert_default","App","this","drawChart","d3","append","attr","style","selectAll","data","enter","d","i","props","root","index_es","App_Header","id","App_BottomBar","PureComponent","withStyles","flexGrow","marginLeft","marginRight","top","bottom","alignItems","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mXAoCMA,EAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OACbC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,UACfJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,KACED,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYM,UAAWR,EAAQS,WAAYC,MAAM,UAAUC,aAAW,QACpEV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,OAEFD,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAYY,QAAQ,KAAKJ,MAAM,UAAUF,UAAWR,EAAQe,MAA5D,QAGAd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQQ,MAAM,WAAd,YAKAO,EAAY,SAAAC,GAAA,IAAGlB,EAAHkB,EAAGlB,QAAH,OAChBC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,QAAQK,MAAM,UAAUF,UAAWR,EAAQmB,cAC1DlB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAASM,UAAWR,EAAQoB,SAC1BnB,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYQ,MAAM,UAAUC,aAAW,eACrCV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,OAEFD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYQ,MAAM,WAChBT,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,OAEFD,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYQ,MAAM,WAChBT,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,WAOJqB,8LAEFC,KAAKC,gDAOOC,IAAU,QACnBC,OAAO,OACPC,KAAK,QALE,KAMPA,KAAK,SALE,KAMPC,MAAM,cAAe,KACpBC,UAAU,QACXC,KAPU,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,KAQ3BC,QACAL,OAAO,QACPC,KAAK,IAAK,SAACK,EAAGC,GAAJ,OAAc,GAAJA,IACpBN,KAAK,IAAK,SAACK,EAAGC,GAAJ,OAZH,IAYiB,GAAKD,IAC7BL,KAAK,QAAS,IACdA,KAAK,SAAU,SAACK,EAAGC,GAAJ,OAAc,GAAJD,IACzBL,KAAK,OAAQ,0CAGT,IACC5B,EAAYwB,KAAKW,MAAjBnC,QACR,OACEC,EAAAC,EAAAC,cAAA,OAAKK,UAAWR,EAAQoC,MACtBnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,CAAQtC,QAASA,IACjBC,EAAAC,EAAAC,cAAA,OAAKoC,GAAI,IAAMf,KAAKW,MAAMI,KAC1BtC,EAAAC,EAAAC,cAACqC,EAAD,CAAWxC,QAASA,YAhCVyC,iBAsCHC,uBA3FA,CACbN,KAAM,CACJO,SAAU,GAEZ5B,KAAM,CACJ4B,SAAU,GAEZlC,WAAY,CACVmC,YAAa,GACbC,YAAa,IAEf1B,aAAc,CACZ2B,IAAK,OACLC,OAAQ,GAEV3B,QAAS,CACP4B,WAAY,SACZC,eAAgB,kBA0ELP,CAAmBnB,GC9Fd2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5ef03222.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { CssBaseline } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MoreIcon from '@material-ui/icons/MoreVert';\n\nimport * as d3 from 'd3';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  appBarBottom: {\n    top: 'auto',\n    bottom: 0,\n  },\n  toolbar: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n};\n\nconst Header = ({ classes }) => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n        <MenuIcon />\n      </IconButton>\n      <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n        News\n      </Typography>\n      <Button color=\"inherit\">Login</Button>\n    </Toolbar>\n  </AppBar>\n);\n\nconst BottomBar = ({ classes }) => (\n  <AppBar position=\"fixed\" color=\"primary\" className={classes.appBarBottom}>\n    <Toolbar className={classes.toolbar}>\n      <IconButton color=\"inherit\" aria-label=\"Open drawer\">\n        <MenuIcon />\n      </IconButton>\n      <div>\n        <IconButton color=\"inherit\">\n          <SearchIcon />\n        </IconButton>\n        <IconButton color=\"inherit\">\n          <MoreIcon />\n        </IconButton>\n      </div>\n    </Toolbar>\n  </AppBar>\n);\n\nclass App extends PureComponent {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const w = 700;\n    const h = 300;\n    const data = [12, 5, 6, 6, 9, 10];\n    const svg = d3.select('body')\n      .append('svg')\n      .attr('width', w)\n      .attr('height', h)\n      .style('margin-left', 100);\n    svg.selectAll('rect')\n      .data(data)\n      .enter()\n      .append('rect')\n      .attr('x', (d, i) => i * 70)\n      .attr('y', (d, i) => h - 10 * d)\n      .attr('width', 65)\n      .attr('height', (d, i) => d * 10)\n      .attr('fill', 'green');\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.root}>\n        <CssBaseline />\n        <Header classes={classes} />\n        <div id={\"#\" + this.props.id} />\n        <BottomBar classes={classes} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}