{"version":3,"sources":["../node_modules/@amcharts/amcharts4/.internal/charts/map/SmallMap.js","../node_modules/@amcharts/amcharts4/.internal/charts/map/ZoomControl.js","../node_modules/@amcharts/amcharts4/.internal/core/responsive/ResponsiveDefaults.js"],"names":["SmallMap_SmallMap","_super","SmallMap","_this","call","this","_chart","Disposer","className","align","valign","percentHeight","percentWidth","margin","interfaceColors","InterfaceColorSet","background","fillOpacity","fill","getFor","events","on","moveToPosition","updateMapSize","seriesContainer","createChild","Container","shouldClone","rectangle","Rectangle","stroke","strokeWidth","strokeOpacity","Object","Color","verticalCenter","horizontalCenter","isMeasured","_disposers","push","applyTheme","tslib_es6","defineProperty","prototype","get","_series","List","handleSeriesAdded","handleSeriesRemoved","enumerable","configurable","event","series","newValue","chart","contains","newSeries","clone","removeValue","dataUsers","parent","interactionsEnabled","invalidate","svgPoint","rectPoint","Utils","zoomLevel","scale","Math","min","x","pixelWidth","y","pixelHeight","geoPoint","svgPointToGeo","zoomToGeoPoint","set","updateRectangle","width","height","ceil","pixelX","pixelY","validate","scaleRatio","afterDraw","moveTo","maskRectangle","processConfig","config","Type","i","len","length","map","hasKey","getKey","Registry","registeredClasses","ZoomControl_ZoomControl","ZoomControl","layout","padding","plusButton","Button","label","text","Percent","slider","handleBackgroundClick","updateThumbSize","thumb","draggable","handleThumbDrag","minusButton","role","readerLive","readerTitle","language","translate","property","fixLayout","undefined","marginTop","marginBottom","toFront","toBack","minX","maxX","minY","maxY","marginLeft","marginRight","sprite","target","spritePoint","maxPower","log","maxZoomLevel","LN2","minPower","minZoomLevel","power","pow","zoomGeoPoint","updateThumb","zoomOut","Interaction","body","ev","topParent","hasFocused","Keyboard","isKey","isFocused","zoomIn","minHeight","stepCount","visible","minWidth","isDown","step","createBackground","RoundedRectangle","__webpack_exports__","relevant","container","state","object","stateId","AxisRenderer","states","create","properties","minLabelPosition","maxLabelPosition","AxisRendererY","inside","AxisRendererCircular","disabled","Chart","Legend","position","AxisRendererX"],"mappings":"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","file":"static/js/responsivedefaults.30652a66.chunk.js","sourcesContent":["/**\r\n * A module for the mini-map control.\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Rectangle } from \"../../core/elements/Rectangle\";\nimport { List } from \"../../core/utils/List\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a \"bird's eye\" view of the whole map.\r\n *\r\n * This control creates a mini-map with the whole of the map, highlighting\r\n * the area which is in the current viewport of the map map.\r\n *\r\n * @see {@link ISmallMapEvents} for a list of available events\r\n * @see {@link ISmallMapAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar SmallMap =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SmallMap, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SmallMap() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A target map.\r\n     *\r\n     * @type {MutableValueDisposer<MapChart>}\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"SmallMap\"; // Set defaults\n\n    _this.align = \"left\";\n    _this.valign = \"bottom\";\n    _this.percentHeight = 20;\n    _this.percentWidth = 20;\n\n    _this.margin(5, 5, 5, 5);\n\n    var interfaceColors = new InterfaceColorSet(); // Set background defailts\n\n    _this.background.fillOpacity = 0.9;\n    _this.background.fill = interfaceColors.getFor(\"background\"); // Set up events\n\n    _this.events.on(\"hit\", _this.moveToPosition, _this, false);\n\n    _this.events.on(\"maxsizechanged\", _this.updateMapSize, _this, false); // Create a container\n\n\n    _this.seriesContainer = _this.createChild(Container);\n    _this.seriesContainer.shouldClone = false; // Create an outline rectangle\n\n    var rectangle = _this.createChild(Rectangle);\n\n    rectangle.shouldClone = false;\n    rectangle.stroke = interfaceColors.getFor(\"alternativeBackground\");\n    rectangle.strokeWidth = 1;\n    rectangle.strokeOpacity = 0.5;\n    rectangle.fill = color(); //\"none\";\n\n    rectangle.verticalCenter = \"middle\";\n    rectangle.horizontalCenter = \"middle\";\n    rectangle.isMeasured = false;\n    _this.rectangle = rectangle;\n\n    _this._disposers.push(_this._chart); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(SmallMap.prototype, \"series\", {\n    /**\r\n     * A list of map series used to draw the mini-map.\r\n     *\r\n     * @readonly\r\n     * @return {List<MapSeries>} Series\r\n     */\n    get: function get() {\n      if (!this._series) {\n        this._series = new List();\n\n        this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false);\n\n        this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false);\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new series when they are pushed into a `series` list.\r\n   *\r\n   * @param {IListEvents<MapSeries>[\"inserted\"]} event Event\r\n   */\n\n  SmallMap.prototype.handleSeriesAdded = function (event) {\n    var series = event.newValue;\n\n    if (this.chart.series.contains(series)) {\n      var newSeries = series.clone();\n\n      this._series.removeValue(series);\n\n      this._series.push(newSeries);\n\n      series = newSeries;\n      this.chart.dataUsers.push(newSeries);\n    }\n\n    series.chart = this.chart;\n    series.parent = this.seriesContainer;\n    series.interactionsEnabled = false;\n  };\n  /**\r\n   * Cleans up after series are removed from Scrollbar.\r\n   *\r\n   * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n   */\n\n\n  SmallMap.prototype.handleSeriesRemoved = function (event) {\n    //let sourceSeries: MapSeries = event.oldValue;\n    this.invalidate();\n  };\n  /**\r\n   * Moves main map pan position after click on the small map.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n   */\n\n\n  SmallMap.prototype.moveToPosition = function (event) {\n    var svgPoint = event.svgPoint;\n    var rectPoint = $utils.svgPointToSprite(svgPoint, this.rectangle);\n    var zoomLevel = this.chart.zoomLevel;\n    var scale = Math.min(this.percentWidth, this.percentHeight) / 100;\n    var x = (rectPoint.x + this.rectangle.pixelWidth / 2) / scale * zoomLevel;\n    var y = (rectPoint.y + this.rectangle.pixelHeight / 2) / scale * zoomLevel;\n    var geoPoint = this.chart.svgPointToGeo({\n      x: x,\n      y: y\n    });\n    this.chart.zoomToGeoPoint(geoPoint, this.chart.zoomLevel, true);\n  };\n\n  Object.defineProperty(SmallMap.prototype, \"chart\", {\n    /**\r\n     * @return {MapChart} Chart/map\r\n     */\n    get: function get() {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A chart/map that this control is meant for.\r\n     *\r\n     * @param {MapChart}  chart  Chart/map\r\n     */\n    set: function set(chart) {\n      if (this.chart != chart) {\n        this._chart.set(chart, new MultiDisposer([//chart.events.on(\"zoomlevelchanged\", this.updateRectangle, this, false),\n        chart.events.on(\"mappositionchanged\", this.updateRectangle, this, false), chart.events.on(\"scaleratiochanged\", this.updateMapSize, this, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the viewport recangle as per current map zoom/pan position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  SmallMap.prototype.updateRectangle = function () {\n    var chart = this.chart;\n    var zoomLevel = chart.zoomLevel;\n    var rectangle = this.rectangle;\n    rectangle.width = this.pixelWidth / zoomLevel;\n    rectangle.height = this.pixelHeight / zoomLevel;\n    var scale = Math.min(this.percentWidth, this.percentHeight) / 100;\n    var seriesContainer = chart.seriesContainer;\n    rectangle.x = Math.ceil((zoomLevel * seriesContainer.pixelWidth / 2 - seriesContainer.pixelX) * scale / zoomLevel + rectangle.pixelWidth / 2);\n    rectangle.y = Math.ceil((zoomLevel * seriesContainer.pixelHeight / 2 - seriesContainer.pixelY) * scale / zoomLevel + rectangle.pixelHeight / 2);\n    rectangle.validate();\n  };\n  /**\r\n   * Update map size so that internal elements can redraw themselves after\r\n   * the size of the small map changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  SmallMap.prototype.updateMapSize = function () {\n    if (this.chart) {\n      this.seriesContainer.scale = this.chart.scaleRatio * Math.min(this.percentWidth, this.percentHeight) / 100;\n      this.updateRectangle();\n      this.afterDraw();\n    }\n  };\n  /**\r\n   * Update elements after drawing the small map.\r\n   */\n\n\n  SmallMap.prototype.afterDraw = function () {\n    _super.prototype.afterDraw.call(this);\n\n    this.seriesContainer.moveTo({\n      x: this.pixelWidth / 2,\n      y: this.pixelHeight / 2\n    });\n    this.rectangle.maskRectangle = {\n      x: -1,\n      y: -1,\n      width: Math.ceil(this.pixelWidth + 2),\n      height: Math.ceil(this.pixelHeight + 2)\n    };\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param {object}  config  Config\r\n   */\n\n\n  SmallMap.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          var series = config.series[i];\n\n          if ($type.hasValue(series) && $type.isString(series) && this.map.hasKey(series)) {\n            config.series[i] = this.map.getKey(series);\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return SmallMap;\n}(Container);\n\nexport { SmallMap };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SmallMap\"] = SmallMap;","/**\r\n * Zoom control module\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Button } from \"../../core/elements/Button\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { keyboard } from \"../../core/utils/Keyboard\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a control for zooming the map.\r\n *\r\n * @see {@link IZoomControlEvents} for a list of available events\r\n * @see {@link IZoomControlAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar ZoomControl =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ZoomControl, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ZoomControl() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A target map.\r\n     *\r\n     * @type {MutableValueDisposer<MapChart>}\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"ZoomControl\";\n    _this.align = \"right\";\n    _this.valign = \"bottom\";\n    _this.layout = \"vertical\";\n\n    _this.padding(5, 5, 5, 5);\n\n    var interfaceColors = new InterfaceColorSet();\n\n    var plusButton = _this.createChild(Button);\n\n    plusButton.shouldClone = false;\n    plusButton.label.text = \"+\";\n    plusButton.width = percent(100);\n    plusButton.padding(5, 5, 5, 5); //plusButton.fontFamily = \"Verdana\";\n\n    _this.plusButton = plusButton;\n\n    var slider = _this.createChild(Container);\n\n    slider.shouldClone = false;\n    slider.width = percent(100);\n    slider.background.fill = interfaceColors.getFor(\"alternativeBackground\");\n    slider.background.fillOpacity = 0.05;\n    slider.background.events.on(\"hit\", _this.handleBackgroundClick, _this, false);\n    slider.events.on(\"sizechanged\", _this.updateThumbSize, _this, false);\n    _this.slider = slider;\n    var thumb = slider.createChild(Button);\n    thumb.shouldClone = false;\n    thumb.padding(0, 0, 0, 0);\n    thumb.draggable = true;\n    thumb.events.on(\"drag\", _this.handleThumbDrag, _this, false);\n    _this.thumb = thumb;\n\n    var minusButton = _this.createChild(Button);\n\n    minusButton.shouldClone = false;\n    minusButton.label.text = \"-\";\n    minusButton.padding(5, 5, 5, 5); //minusButton.fontFamily = \"Verdana\";\n\n    _this.minusButton = minusButton; // Set roles\n\n    _this.thumb.role = \"slider\";\n    _this.thumb.readerLive = \"polite\"; // Set reader text\n\n    _this.thumb.readerTitle = _this.language.translate(\"Use arrow keys to zoom in and out\");\n    _this.minusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom in\");\n    _this.plusButton.readerTitle = _this.language.translate(\"Press ENTER to zoom out\");\n\n    _this.applyTheme();\n\n    _this.events.on(\"propertychanged\", function (event) {\n      if (event.property == \"layout\") {\n        _this.fixLayout();\n      }\n    }, undefined, false);\n\n    _this._disposers.push(_this._chart);\n\n    _this.fixLayout();\n\n    return _this;\n  }\n\n  ZoomControl.prototype.fixLayout = function () {\n    if (this.layout == \"vertical\") {\n      this.width = 40;\n      this.height = undefined;\n      this.minusButton.width = percent(100);\n      this.thumb.width = percent(100);\n      this.plusButton.width = percent(100);\n      this.slider.width = percent(100);\n      this.minusButton.marginTop = 1;\n      this.plusButton.marginBottom = 2;\n      this.slider.height = 0;\n      this.minusButton.toFront();\n      this.plusButton.toBack();\n      this.thumb.minX = 0;\n      this.thumb.maxX = 0;\n      this.thumb.minY = 0;\n    } else if (this.layout == \"horizontal\") {\n      this.thumb.minX = 0;\n      this.thumb.minY = 0;\n      this.thumb.maxY = 0;\n      this.height = 40;\n      this.width = undefined;\n      this.minusButton.height = percent(100);\n      this.minusButton.width = 30;\n      this.thumb.height = percent(100);\n      this.thumb.width = undefined;\n      this.plusButton.height = percent(100);\n      this.plusButton.width = 30;\n      this.slider.height = percent(100);\n      this.slider.width = 0;\n      this.minusButton.marginLeft = 2;\n      this.plusButton.marginRight = 2;\n      this.minusButton.toBack();\n      this.plusButton.toFront();\n    }\n  };\n  /**\r\n   * Handles zoom operation after clicking on the slider background.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]}  event  Event\r\n   */\n\n\n  ZoomControl.prototype.handleBackgroundClick = function (event) {\n    var sprite = event.target;\n    var y = event.spritePoint.y;\n    var chart = this.chart;\n    var maxPower = Math.log(chart.maxZoomLevel) / Math.LN2;\n    var minPower = Math.log(chart.minZoomLevel) / Math.LN2;\n    var power = (sprite.pixelHeight - y) / sprite.pixelHeight * (minPower + (maxPower - minPower));\n    var zoomLevel = Math.pow(2, power);\n    chart.zoomToGeoPoint(chart.zoomGeoPoint, zoomLevel);\n  };\n\n  Object.defineProperty(ZoomControl.prototype, \"chart\", {\n    /**\r\n     * @return {MapChart} Map/chart\r\n     */\n    get: function get() {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A main chart/map that this zoom control is for.\r\n     *\r\n     * @param {MapChart}  chart  Map/chart\r\n     */\n    set: function set(chart) {\n      var _this = this;\n\n      this._chart.set(chart, new MultiDisposer([chart.events.on(\"maxsizechanged\", this.updateThumbSize, this, false), chart.events.on(\"zoomlevelchanged\", this.updateThumb, this, false), this.minusButton.events.on(\"hit\", function () {\n        chart.zoomOut(chart.zoomGeoPoint);\n      }, chart, false), getInteraction().body.events.on(\"keyup\", function (ev) {\n        if (_this.topParent.hasFocused) {\n          if (keyboard.isKey(ev.event, \"enter\")) {\n            if (_this.minusButton.isFocused) {\n              chart.zoomOut();\n            } else if (_this.plusButton.isFocused) {\n              chart.zoomIn();\n            }\n          } else if (keyboard.isKey(ev.event, \"plus\")) {\n            chart.zoomIn();\n          } else if (keyboard.isKey(ev.event, \"minus\")) {\n            chart.zoomOut();\n          }\n        }\n      }, chart), this.plusButton.events.on(\"hit\", function () {\n        chart.zoomIn(chart.zoomGeoPoint);\n      }, chart, false)]));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the slider's thumb size based on the available zoom space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ZoomControl.prototype.updateThumbSize = function () {\n    var chart = this.chart;\n\n    if (chart) {\n      var slider = this.slider;\n      var thumb = this.thumb;\n\n      if (this.layout == \"vertical\") {\n        thumb.minHeight = Math.min(this.slider.pixelHeight, 20);\n        thumb.height = slider.pixelHeight / this.stepCount;\n        thumb.maxY = slider.pixelHeight - thumb.pixelHeight;\n\n        if (thumb.pixelHeight <= 1) {\n          thumb.visible = false;\n        } else {\n          thumb.visible = true;\n        }\n      } else {\n        thumb.minWidth = Math.min(this.slider.pixelWidth, 20);\n        thumb.width = slider.pixelWidth / this.stepCount;\n        thumb.maxX = slider.pixelWidth - thumb.pixelWidth;\n\n        if (thumb.pixelWidth <= 1) {\n          thumb.visible = false;\n        } else {\n          thumb.visible = true;\n        }\n      }\n    }\n  };\n  /**\r\n   * Updates thumb according to current zoom position from map.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ZoomControl.prototype.updateThumb = function () {\n    var slider = this.slider;\n    var chart = this.chart;\n    var thumb = this.thumb;\n\n    if (!thumb.isDown) {\n      var step = (Math.log(chart.zoomLevel) - Math.log(this.chart.minZoomLevel)) / Math.LN2;\n\n      if (this.layout == \"vertical\") {\n        thumb.y = slider.pixelHeight - (slider.pixelHeight - thumb.pixelHeight) * step / this.stepCount - thumb.pixelHeight;\n      } else {\n        thumb.x = slider.pixelWidth * step / this.stepCount;\n      }\n    }\n  };\n  /**\r\n   * Zooms the actual map when slider position changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ZoomControl.prototype.handleThumbDrag = function () {\n    var slider = this.slider;\n    var chart = this.chart;\n    var thumb = this.thumb;\n    var step;\n    var minStep = Math.log(this.chart.minZoomLevel) / Math.LN2;\n\n    if (this.layout == \"vertical\") {\n      step = this.stepCount * (slider.pixelHeight - thumb.pixelY - thumb.pixelHeight) / (slider.pixelHeight - thumb.pixelHeight);\n    } else {\n      step = this.stepCount * thumb.pixelX / slider.pixelWidth;\n    }\n\n    step = minStep + step;\n    var zoomLevel = Math.pow(2, step);\n    chart.zoomToGeoPoint(undefined, zoomLevel, false, 0);\n  };\n\n  Object.defineProperty(ZoomControl.prototype, \"stepCount\", {\n    /**\r\n     * Returns the step countfor the slider grid according to map's min and max\r\n     * zoom level settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {number} Step count\r\n     */\n    get: function get() {\n      return Math.log(this.chart.maxZoomLevel) / Math.LN2 - Math.log(this.chart.minZoomLevel) / Math.LN2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a background element for slider control.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return {this} Background\r\n   */\n\n  ZoomControl.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n\n  return ZoomControl;\n}(Container);\n\nexport { ZoomControl };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ZoomControl\"] = ZoomControl;","/**\r\n * Defines default Responsive rules\r\n * @hidden\r\n */\nimport { AxisRenderer } from \"../../charts/axes/AxisRenderer\";\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\nimport { AxisRendererCircular } from \"../../charts/axes/AxisRendererCircular\";\nimport { Chart } from \"../../charts/Chart\";\nimport { Legend } from \"../../charts/Legend\";\nimport { SmallMap } from \"../../charts/map/SmallMap\";\nimport { ZoomControl } from \"../../charts/map/ZoomControl\";\n/**\r\n * ============================================================================\r\n * RULES\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Default rules.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Do not create states for objects that do not have any overrides\r\n */\n\nexport default [\n/**\r\n * --------------------------------------------------------------------------\r\n * Microcharts and sparklines\r\n * W<=100 || H<=100\r\n * @todo\r\n */\n{\n  relevant: function relevant(container) {\n    if (container.pixelWidth <= 100 || container.pixelHeight <= 100) {\n      return true;\n    }\n\n    return false;\n  },\n  state: function state(object, stateId) {\n    // Put vertical axis labels inside\n    if (object instanceof AxisRenderer) {\n      var state = object.states.create(stateId);\n      state.properties.minLabelPosition = 1;\n      state.properties.maxLabelPosition = 0;\n      return state;\n    }\n  }\n},\n/**\r\n * --------------------------------------------------------------------------\r\n * Narrow\r\n * W<=200\r\n */\n{\n  relevant: function relevant(container) {\n    if (container.pixelWidth <= 200) {\n      return true;\n    }\n\n    return false;\n  },\n  state: function state(object, stateId) {\n    // Put vertical axis labels inside\n    if (object instanceof AxisRendererY) {\n      var state = object.states.create(stateId);\n      state.properties.inside = true;\n      return state;\n    }\n\n    if (object instanceof AxisRendererCircular) {\n      var state = object.states.create(stateId);\n      state.properties.inside = true;\n      return state;\n    }\n\n    if (object instanceof SmallMap) {\n      var state = object.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    /*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n        let state = object.states.create(stateId);\r\n        state.properties.height = 0;\r\n        return state;\r\n    }*/\n\n\n    if (object instanceof ZoomControl) {\n      var state = object.states.create(stateId);\n      state.properties.layout = \"vertical\";\n      return state;\n    }\n\n    if (object instanceof Chart) {\n      var state = object.states.create(stateId);\n      state.properties.marginLeft = 0;\n      state.properties.marginRight = 0;\n      return state;\n    }\n\n    if (object instanceof Legend && (object.position == \"left\" || object.position == \"right\")) {\n      var state = object.states.create(stateId);\n      state.properties.position = \"bottom\";\n      return state;\n    }\n  }\n},\n/**\r\n * --------------------------------------------------------------------------\r\n * Short\r\n * H<=200\r\n */\n{\n  relevant: function relevant(container) {\n    if (container.pixelHeight <= 200) {\n      return true;\n    }\n\n    return false;\n  },\n  state: function state(object, stateId) {\n    // Put vertical axis labels inside\n    if (object instanceof AxisRendererX) {\n      var state = object.states.create(stateId);\n      state.properties.inside = true;\n      return state;\n    }\n\n    if (object instanceof AxisRendererCircular) {\n      var state = object.states.create(stateId);\n      state.properties.inside = true;\n      return state;\n    }\n\n    if (object instanceof SmallMap) {\n      var state = object.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    /*if (object instanceof Container && object.parent instanceof ZoomControl && !(object instanceof Button)) {\r\n        let state = object.states.create(stateId);\r\n        state.properties.width = 100;\r\n        return state;\r\n    }*/\n\n\n    if (object instanceof ZoomControl) {\n      var state = object.states.create(stateId);\n      state.properties.layout = \"horizontal\";\n      return state;\n    }\n\n    if (object instanceof Chart) {\n      var state = object.states.create(stateId);\n      state.properties.marginTop = 0;\n      state.properties.marginBottom = 0;\n      return state;\n    }\n\n    if (object instanceof Legend && (object.position == \"bottom\" || object.position == \"top\")) {\n      var state = object.states.create(stateId);\n      state.properties.position = \"right\";\n      return state;\n    }\n  }\n},\n/**\r\n * --------------------------------------------------------------------------\r\n * Super-small\r\n * W<=200 && H<=200\r\n */\n{\n  relevant: function relevant(container) {\n    if (container.pixelWidth <= 200 && container.pixelHeight <= 200) {\n      return true;\n    }\n\n    return false;\n  },\n  state: function state(object, stateId) {\n    // Hide legend\n    if (object instanceof Legend) {\n      var state = object.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    if (object instanceof ZoomControl) {\n      var state = object.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n  }\n}];"],"sourceRoot":""}